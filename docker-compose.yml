version: "3.8"
services:

  gateway:
    image: nginx:1.19.8-alpine
    #    build:
    #      context: ./services/Gateway
    #      dockerfile: Dockerfile
    ports:
      - 8080:8080
    networks:
      - servers
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
    depends_on:
      - product-service

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
      args:
        STAGE: ${STAGE:-dev}
      target: ${TARGET_PRODUCT_SERVICE:-productServiceRuntime}
    image: marinavojnovic/product-service:${VERSION:-0.2.0}-${STAGE:-dev}
    container_name: product-service
    restart: on-failure
    networks:
      - servers
    ports:
      - 8081:8080
    environment:
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_DOMAIN: ${DATABASE_DOMAIN}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA}
    depends_on:
      - database
#
#  shopping-service:
#    build:
#      context: ./shopping-service
#      dockerfile: Dockerfile
#      args:
#        STAGE: ${STAGE:-dev}
#      target: ${TARGET_SHOPPING_SERVICE:-shoppingServiceRuntime}
#    image: marinavojnovic/shopping-service:${VERSION:-0.2.0}-${STAGE:-dev}
#    container_name: shopping-service
#    restart: on-failure
#    networks:
#      - servers
#    ports:
#      - 8082:8082
#    environment:
#      DATABASE_USERNAME: ${DATABASE_USERNAME}
#      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
#      DATABASE_DOMAIN: ${DATABASE_DOMAIN}
#      DATABASE_SCHEMA: ${DATABASE_SCHEMA}
#    depends_on:
#      - database

#  agent-reports:
#      build:
#        context: ./agent-reports
#        dockerfile: Dockerfile
#        args:
#          STAGE: ${STAGE:-dev}
#        target: ${TARGET_AGENT_REPORTS:-agentReportsRuntime}
#      image: marinavojnovic/agent-reports:${VERSION:-0.2.0}-${STAGE:-dev}
#      container_name: agent-reports
#      restart: on-failure
#      networks:
#        - servers
#      ports:
#        - 8083:8080
#      environment:
#        DATABASE_USERNAME: ${DATABASE_USERNAME}
#        DATABASE_PASSWORD: ${DATABASE_PASSWORD}
#        DATABASE_DOMAIN: ${DATABASE_DOMAIN}
#        DATABASE_SCHEMA: ${DATABASE_SCHEMA}
#      depends_on:
#        - database

  database:
    image: mysql:${MYSQL_VERSION:-8.0.19}
    container_name: mysql
    restart: always
    networks:
      - servers
    ports:
        - 3307:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - database-data:/var/lib/mysql

#  database-post-service:
#    image: mysql:${MYSQL_VERSION:-8.0.19}
#    container_name: mysql-postService
#    restart: always
#    networks:
#      - servers
#    environment:
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD_POST_SERVICE}
#      MYSQL_USER: ${MYSQL_USER_POST_SERVICE}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD_POST_SERVICE}
#      MYSQL_DATABASE: ${MYSQL_DATABASE_POST_SERVICE}
#    volumes:
#      - database-data-post-service:/var/lib/mysql

#  database-profile-interaction-service:
#    image: mysql:${MYSQL_VERSION:-8.0.19}
#    container_name: mysql-profileInteractionService
#    restart: always
#    networks:
#      - servers
#    environment:
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD_PROFILE_INTERACTION_SERVICE}
#      MYSQL_USER: ${MYSQL_USER_PROFILE_INTERACTION_SERVICE}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD_PROFILE_INTERACTION_SERVICE}
#      MYSQL_DATABASE: ${MYSQL_DATABASE_PROFILE_INTERACTION_SERVICE}
#    volumes:
#      - database-data-profile-interaction-service:/var/lib/mysql

volumes:
  database-data:
    name: server-database
#  database-data-post-service:
#    name: server-database-post-service
#  database-data-profile-interaction-service:
#    name: server-database-profile-interaction-service

networks:
  servers:
    name: servers
    driver: bridge
